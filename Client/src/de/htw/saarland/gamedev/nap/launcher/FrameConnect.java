/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package de.htw.saarland.gamedev.nap.launcher;

import com.smartfoxserver.v2.exceptions.SFSException;
import de.htw.saarland.gamedev.nap.NetworkConstants;
import javax.swing.JOptionPane;
import sfs2x.client.SmartFox;
import sfs2x.client.core.BaseEvent;
import sfs2x.client.core.IEventListener;
import sfs2x.client.core.SFSEvent;
import sfs2x.client.requests.LoginRequest;

/**
 *
 * @author Pascal
 */
public class FrameConnect extends javax.swing.JFrame implements IEventListener {
    
    private SmartFox sfClient;
    private ILauncherStart listener;
    
    /**
     * Creates new form FrameConnect
     */
    public FrameConnect(SmartFox sfClient, ILauncherStart listener) {
        sfClient.addEventListener(SFSEvent.CONNECTION, this);
        sfClient.addEventListener(SFSEvent.LOGIN, this);
        sfClient.addEventListener(SFSEvent.LOGIN_ERROR, this);
        
        this.sfClient = sfClient;
        this.listener = listener;
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textFieldHost = new javax.swing.JTextField();
        textFieldPort = new javax.swing.JTextField();
        textFieldUsername = new javax.swing.JTextField();
        buttonConnect = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Nap Launcher");
        setMaximumSize(new java.awt.Dimension(265, 131));
        setMinimumSize(new java.awt.Dimension(265, 131));
        setPreferredSize(new java.awt.Dimension(265, 165));
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Host:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jLabel1, gridBagConstraints);

        jLabel2.setText("Port:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jLabel2, gridBagConstraints);

        jLabel3.setText("Username:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jLabel3, gridBagConstraints);

        textFieldHost.setText("localhost");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(textFieldHost, gridBagConstraints);

        textFieldPort.setText("9933");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(textFieldPort, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(textFieldUsername, gridBagConstraints);

        buttonConnect.setText("Connect");
        buttonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConnectActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(buttonConnect, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConnectActionPerformed
        sfClient.connect(textFieldHost.getText(), Integer.parseInt(textFieldPort.getText()));
    }//GEN-LAST:event_buttonConnectActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonConnect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField textFieldHost;
    private javax.swing.JTextField textFieldPort;
    private javax.swing.JTextField textFieldUsername;
    // End of variables declaration//GEN-END:variables

    @Override
    public void dispatch(BaseEvent be) throws SFSException {
        switch (be.getType()) {
            case SFSEvent.CONNECTION:
                if ((Boolean)be.getArguments().get(NetworkConstants.SUCCESS_KEY)) {
                    //successfully connected
                    sfClient.send(new LoginRequest(textFieldUsername.getText(), null, NetworkConstants.ZONE_NAME));
                }
                else {
                    JOptionPane.showMessageDialog(null, "Unable to connect! Check your network connection.", "Error", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case SFSEvent.LOGIN:
                //successfully connected, start the "real" launcher frame
                
                listener.startLauncher();
                break;
            case SFSEvent.LOGIN_ERROR:
                //cannot login :( . Show why and disconnect
                sfClient.disconnect();
                
                JOptionPane.showMessageDialog(null, "Login error!\n" + be.getArguments().get(NetworkConstants.ERROR_MESSAGE_KEY), "Error", JOptionPane.ERROR_MESSAGE);
                break;
            default:
                System.out.println("Server Packet not handled: " + be.getType());
                break;
        }
    }
}
