/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package de.htw.saarland.gamedev.nap.mapeditor;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.border.LineBorder;

/**
 *
 * @author Pascal
 */
public class MapEditor extends javax.swing.JFrame {

    private static final String BASE_PATH = "/resources/";
    
    //load all files from a directory in future (or from a tileset)
    private static final String[] TILE_NAMES = {
        "dark-00.png", "dark-0.png", "dark-1.png",
        "dark-2.png", "dark-3.png", "dark-4.png",
        "dark-5.png", "dark-6.png", "dark-7.png",
        "dark-8.png", "dark-9.png"
    };
    
    private int[][] mapTiles;
    private Image img;
    private Icon selectedTile;
    private int selectedTileNr;
    
    /**
     * Creates new form MapEditor
     */
    public MapEditor() {
        img = getToolkit().getImage(getClass().getResource(BASE_PATH + "background.png"));
        
        initComponents();
        
        buildPalette(2);
        buildMap(100, 10);
    }
    
    private void buildPalette(int columns) {
        int tileCount = TILE_NAMES.length;
        
        panelPalette.removeAll();
        
        GridLayout layout = (GridLayout)panelPalette.getLayout();
        layout.setColumns(columns);
        layout.setRows((int)Math.ceil((double)tileCount / (double)columns));
        
        for (int i = 0; i < tileCount; i++) {
            Icon icon = new ImageIcon(getClass().getResource(BASE_PATH + TILE_NAMES[i]));
            final int nr = i;
            
            final JLabel tmp = new JLabel(icon);
            tmp.setPreferredSize(new Dimension(96, 96));
            
            tmp.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseEntered(MouseEvent e) {
                    tmp.setBorder(new LineBorder(Color.CYAN, 3));
                }
                @Override
                public void mouseExited(MouseEvent e) {
                    tmp.setBorder(null);
                }
                @Override
                public void mouseClicked(MouseEvent e) {
                    selectedTile = tmp.getIcon();
                    selectedTileNr = nr;
                }
            });

            panelPalette.add(tmp);
        }
        
        panelPalette.revalidate();
    }
    
    private void buildMap(int width, int height) {
        img = img.getScaledInstance(width * 96, height * 96, Image.SCALE_FAST);
        
        mapTiles = new int[height][width];
        
        panelMap.removeAll();
        
        GridLayout layout = (GridLayout)panelMap.getLayout();
        layout.setColumns(width);
        layout.setRows(height);
        
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                final JLabel tmp = new JLabel(i + "," + j);
                final int x = i, y = j;
                tmp.setPreferredSize(new Dimension(96, 96));
                mapTiles[i][j] = -1;
                
                tmp.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseEntered(MouseEvent e) {
                        tmp.setBorder(new LineBorder(Color.BLACK, 1));
                    }
                    @Override
                    public void mouseExited(MouseEvent e) {
                        tmp.setBorder(null);
                    }
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getButton() == MouseEvent.BUTTON1) {
                            tmp.setIcon(selectedTile);
                            mapTiles[x][y] = selectedTileNr;
                        }
                        else {
                            tmp.setIcon(null);
                            mapTiles[x][y] = -1;
                        }
                    }
                });
                
                panelMap.add(tmp);
            }
        }
        
        panelMap.revalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        panelMap = new JPanel() {
            @Override
            public void paintComponent(Graphics g) {
                g.drawImage(img, 0, 0, null);
                //super.paint(g);
            }
        };
        jScrollPane2 = new javax.swing.JScrollPane();
        panelPalette = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuItemSetSize = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuItemSave = new javax.swing.JMenuItem();
        menuItemLoad = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1000, 600));

        panelMap.setLayout(new java.awt.GridLayout(1, 0));
        jScrollPane1.setViewportView(panelMap);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        panelPalette.setLayout(new java.awt.GridLayout(1, 0, 5, 5));
        jScrollPane2.setViewportView(panelPalette);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.EAST);

        jMenu1.setText("File");

        menuItemSetSize.setText("Size");
        menuItemSetSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSetSizeActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemSetSize);
        jMenu1.add(jSeparator1);

        menuItemSave.setText("Save");
        menuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSaveActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemSave);

        menuItemLoad.setText("Load");
        jMenu1.add(menuItemLoad);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemSetSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSetSizeActionPerformed
        String sWidth = JOptionPane.showInputDialog(this, "Type in a width", 100);
        String sHeight = JOptionPane.showInputDialog(this, "Type in a height", 100);
        
        try {
            int width = Integer.parseInt(sWidth);
            int height = Integer.parseInt(sHeight);

            buildMap(width, height);
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Width or height was invalid", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_menuItemSetSizeActionPerformed

    private void menuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSaveActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(false);
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            
            if (f.exists() &&
                    JOptionPane.showConfirmDialog(this, "File exists, overwrite?", "File exists", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.NO_OPTION) {
                return;
            }
            
            BufferedWriter bw = null;
            
            try {
                try {
                    bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(f)));

                    for (int i = 0; i < mapTiles.length; i++) {
                        for (int j = 0; j < mapTiles[i].length; j++) {
                            bw.write("(" + Integer.toString(mapTiles[i][j]) + ")");
                        }
                        bw.write("\r\n");
                    }
                }   
                finally {
                    if (bw != null) {
                        bw.flush();
                        bw.close();
                    }
                }
            }
            catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error saving file :(", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_menuItemSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MapEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MapEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MapEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MapEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MapEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem menuItemLoad;
    private javax.swing.JMenuItem menuItemSave;
    private javax.swing.JMenuItem menuItemSetSize;
    private javax.swing.JPanel panelMap;
    private javax.swing.JPanel panelPalette;
    // End of variables declaration//GEN-END:variables
}
